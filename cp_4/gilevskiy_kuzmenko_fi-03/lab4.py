from typing import List
import time

class LRZ:
    def __init__(self, recurrent_coefs, poly_deg):
        self.filling = 0
        self.mask_for_bit_to_pop = 1
        self.mask_for_bit_to_set = 0
        self.max_bit_n = poly_deg - 1
        self.recurrent_coefs = recurrent_coefs

        self.mask_for_bit_to_set = 1 << self.max_bit_n

    def generate_from_fill(self, filling, length):
        self.filling = filling
        feedback = []

        for _ in range(length):
            feedback.append(self.filling & self.mask_for_bit_to_pop)
            self.filling = (self.filling >> 1) ^ (((self.filling & self.recurrent_coefs).bit_count() & 1) << self.max_bit_n)

        return feedback

    
class GeffeGenerator:
    def __init__(self, lfsr1: LRZ, lfsr2: LRZ, lfsr3: LRZ):
        self.lfsr1 = lfsr1
        self.lfsr2 = lfsr2
        self.lfsr3 = lfsr3

    def generate(self, initial_lfsr1: int, initial_lfsr2: int, initial_lfsr3: int, length: int) -> List[int]:
        res = []
        x_seq = self.lfsr1.generate_from_fill(initial_lfsr1, length)
        y_seq = self.lfsr2.generate_from_fill(initial_lfsr2, length)
        s_seq = self.lfsr3.generate_from_fill(initial_lfsr3, length)

        for i in range(length):
            if s_seq[i] == 1:
                res.append(x_seq[i])
            else:
                res.append(y_seq[i])

        return res


dummy_variant
full_variant

string_len = 2048

start = time.time()

lfsr1_rec = ((1 << 3) ^ 1)
lfsr1_deg = 25
lfsr2_rec = ((1 << 6) ^ (1 << 2) ^ (1 << 1) ^ 1)
lfsr2_deg = 26
lfsr3_rec = ((1 << 5) ^ (1 << 2) ^ (1 << 1) ^ 1)
lfsr3_deg = 27

N = len(dummy_variant)
r_seq = [int(bit) for bit in dummy_variant]

N1_req = 222
C1 = 71
N2_req = 229
C2 = 74

lfsr1 = LRZ(lfsr1_rec, lfsr1_deg)
lfsr2 = LRZ(lfsr2_rec, lfsr2_deg)
lfsr3 = LRZ(lfsr3_rec, lfsr3_deg)

lfsr1_candidates = []
cyclen = (1 << lfsr1_deg) + N1_req
curr_candidate = 1
generated_seq = lfsr1.generate_from_fill(curr_candidate, cyclen)

for j in range(1 << lfsr1_deg):
    R = sum(generated_seq[j + i] ^ r_seq[i] for i in range(N1_req))
    if R < C1:
        lfsr1_candidates.append((curr_candidate, R))
    curr_candidate = (curr_candidate >> 1) ^ ((generated_seq[lfsr1_deg + j]) << (lfsr1_deg - 1))

print("L1 ", len(lfsr1_candidates), " кандидатів")

lfsr2_candidates = []
cyclen = (1 << lfsr2_deg) + N2_req
curr_candidate = 1
generated_seq = lfsr2.generate_from_fill(curr_candidate, cyclen)

for j in range(1 << lfsr2_deg):
    R = sum(generated_seq[j + i] ^ r_seq[i] for i in range(N2_req))
    if R < C2:
        lfsr2_candidates.append((curr_candidate, R))
    curr_candidate = (curr_candidate >> 1) ^ ((generated_seq[lfsr2_deg + j]) << (lfsr2_deg - 1))

print("L2 ", len(lfsr2_candidates), " кандидатів")

lfsr1_candidate = 0
lfsr2_candidate = 0
lfsr3_candidate = 0

best_candidate_lfsr1 = lfsr1_candidates[0][0]
min_deviation = lfsr1_candidates[0][1] - 0.25 * N1_req
for b, R in lfsr1_candidates:
    deviation = R - 0.25 * N1_req
    if deviation < min_deviation:
        best_candidate_lfsr1 = b
        min_deviation = deviation

best_candidate_lfsr2 = lfsr2_candidates[0][0]
min_deviation = lfsr2_candidates[0][1] - 0.25 * N2_req
for b, R in lfsr2_candidates:
    deviation = R - 0.25 * N2_req
    if deviation < min_deviation:
        best_candidate_lfsr2 = b
        min_deviation = deviation

cyclen = (1 << lfsr3_deg) + N
curr_candidate = 1
lfsr3_seq = lfsr3.generate_from_fill(curr_candidate, cyclen)

lfsr1_seq = lfsr1.generate_from_fill(best_candidate_lfsr1, N)

lfsr2_seq = lfsr2.generate_from_fill(best_candidate_lfsr2, N)

for j in range(1 << lfsr3_deg):
    found = True
    for l3, l1, l2, r in zip(lfsr3_seq[j:], lfsr1_seq, lfsr2_seq, r_seq):
        if ((l3 & l1) ^ ((1 ^ l3) & l2)) != r:
            found = False
            break

    if found:
        lfsr1_candidate = best_candidate_lfsr1
        lfsr2_candidate = best_candidate_lfsr2
        lfsr3_candidate = curr_candidate
        break

    curr_candidate = (curr_candidate >> 1) ^ ((lfsr3_seq[lfsr3_deg + j]) << (lfsr3_deg - 1))

print("L3")

print("\nL1 кандидат: ", lfsr1_candidate, bin(lfsr1_candidate))
print("L2 кандидат: ", lfsr2_candidate, bin(lfsr2_candidate))
print("L3 кандидат: ", lfsr3_candidate, bin(lfsr3_candidate))

print("Перевірка")
generator = GeffeGenerator(lfsr1, lfsr2, lfsr3)

test_gen = generator.generate(lfsr1_candidate, lfsr2_candidate, lfsr3_candidate, string_len)

print("Згенерована послідовність: ")
print("".join(str(bit) for bit in test_gen))

print("Очікувана послідовість:")
print(dummy_variant)

end = time.time()
execution_time = end - start
print("\nЧас виконання: ", execution_time, "секунд")
